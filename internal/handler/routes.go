// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	adminauth "PowerX/internal/handler/admin/auth"
	admincommon "PowerX/internal/handler/admin/common"
	admincrmbusinessopportunity "PowerX/internal/handler/admin/crm/business/opportunity"
	admincrmcustomerdomaincustomer "PowerX/internal/handler/admin/crm/customerdomain/customer"
	admincrmcustomerdomainleader "PowerX/internal/handler/admin/crm/customerdomain/leader"
	admincrmcustomerdomainregistercode "PowerX/internal/handler/admin/crm/customerdomain/registercode"
	admincrmmarketmedia "PowerX/internal/handler/admin/crm/market/media"
	admincrmmarketmgm "PowerX/internal/handler/admin/crm/market/mgm"
	admincrmmarketstore "PowerX/internal/handler/admin/crm/market/store"
	admincrmproduct "PowerX/internal/handler/admin/crm/product"
	admincrmproductartisan "PowerX/internal/handler/admin/crm/product/artisan"
	admincrmproductcategory "PowerX/internal/handler/admin/crm/product/category"
	admincrmproductpricebook "PowerX/internal/handler/admin/crm/product/pricebook"
	admincrmproductpricebookentry "PowerX/internal/handler/admin/crm/product/pricebookentry"
	admincrmproductproductspecific "PowerX/internal/handler/admin/crm/product/productspecific"
	admincrmproductproductstatistics "PowerX/internal/handler/admin/crm/product/productstatistics"
	admincrmproductsku "PowerX/internal/handler/admin/crm/product/sku"
	admincrmtradeaddressbilling "PowerX/internal/handler/admin/crm/trade/address/billing"
	admincrmtradeaddressdelivery "PowerX/internal/handler/admin/crm/trade/address/delivery"
	admincrmtradeaddressshipping "PowerX/internal/handler/admin/crm/trade/address/shipping"
	admincrmtradeorder "PowerX/internal/handler/admin/crm/trade/order"
	admincrmtradepayment "PowerX/internal/handler/admin/crm/trade/payment"
	admincrmtradetoken "PowerX/internal/handler/admin/crm/trade/token"
	admincrmtradewarehouse "PowerX/internal/handler/admin/crm/trade/warehouse"
	admindepartment "PowerX/internal/handler/admin/department"
	admindictionary "PowerX/internal/handler/admin/dictionary"
	adminemployee "PowerX/internal/handler/admin/employee"
	admininfoorganizationcategory "PowerX/internal/handler/admin/infoorganization/category"
	adminmediaresource "PowerX/internal/handler/admin/mediaresource"
	adminpermission "PowerX/internal/handler/admin/permission"
	adminposition "PowerX/internal/handler/admin/position"
	adminscrmapp "PowerX/internal/handler/admin/scrm/app"
	adminscrmbot "PowerX/internal/handler/admin/scrm/bot"
	adminscrmcontractway "PowerX/internal/handler/admin/scrm/contractway"
	adminscrmcustomer "PowerX/internal/handler/admin/scrm/customer"
	adminscrmorganization "PowerX/internal/handler/admin/scrm/organization"
	adminscrmqrcode "PowerX/internal/handler/admin/scrm/qrcode"
	adminscrmresource "PowerX/internal/handler/admin/scrm/resource"
	adminscrmtag "PowerX/internal/handler/admin/scrm/tag"
	admintag "PowerX/internal/handler/admin/tag"
	adminuserinfo "PowerX/internal/handler/admin/userinfo"
	adminwechatofficialaccountmedia "PowerX/internal/handler/admin/wechat/officialaccount/media"
	adminwechatofficialaccountmenu "PowerX/internal/handler/admin/wechat/officialaccount/menu"
	mpcrmcustomerauth "PowerX/internal/handler/mp/crm/customer/auth"
	mpcrmmarketmedia "PowerX/internal/handler/mp/crm/market/media"
	mpcrmmarketstore "PowerX/internal/handler/mp/crm/market/store"
	mpcrmproduct "PowerX/internal/handler/mp/crm/product"
	mpcrmproductartisan "PowerX/internal/handler/mp/crm/product/artisan"
	mpcrmproductproductstatistics "PowerX/internal/handler/mp/crm/product/productstatistics"
	mpcrmtradeaddressbilling "PowerX/internal/handler/mp/crm/trade/address/billing"
	mpcrmtradeaddressdelivery "PowerX/internal/handler/mp/crm/trade/address/delivery"
	mpcrmtradeaddressshipping "PowerX/internal/handler/mp/crm/trade/address/shipping"
	mpcrmtradecart "PowerX/internal/handler/mp/crm/trade/cart"
	mpcrmtradeorder "PowerX/internal/handler/mp/crm/trade/order"
	mpcrmtradepayment "PowerX/internal/handler/mp/crm/trade/payment"
	mpdictionary "PowerX/internal/handler/mp/dictionary"
	plugin "PowerX/internal/handler/plugin"
	systemhealth "PowerX/internal/handler/system/health"
	webcustomerauth "PowerX/internal/handler/web/customer/auth"
	webcustomerauthoa "PowerX/internal/handler/web/customer/auth/oa"
	webinfoorganizationcategory "PowerX/internal/handler/web/infoorganization/category"
	webscene "PowerX/internal/handler/web/scene"
	"PowerX/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/",
				Handler: GetHomeHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeNoPermJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/options/employees",
					Handler: admincommon.GetEmployeeOptionsHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/options/employee-query",
					Handler: admincommon.GetEmployeeQueryOptionsHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/options/departments",
					Handler: admincommon.GetDepartmentOptionsHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/options",
					Handler: admincommon.GetOptionsHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/common"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/department-tree/:depId",
					Handler: admindepartment.GetDepartmentTreeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/departments/:id",
					Handler: admindepartment.GetDepartmentHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/departments",
					Handler: admindepartment.CreateDepartmentHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/departments/:id",
					Handler: admindepartment.PatchDepartmentHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/departments/:id",
					Handler: admindepartment.DeleteDepartmentHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/department"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/positions",
					Handler: adminposition.CreatePositionHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/positions/:id",
					Handler: adminposition.PatchPositionHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/positions/:id",
					Handler: adminposition.DeletePositionHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/positions",
					Handler: adminposition.ListPositionsHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/positions/:id",
					Handler: adminposition.GetPositionHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/position"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/employees/actions/sync",
					Handler: adminemployee.SyncEmployeesHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/employees/:id",
					Handler: adminemployee.GetEmployeeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/employees",
					Handler: adminemployee.ListEmployeesHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/employees",
					Handler: adminemployee.CreateEmployeeHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/employees/:id",
					Handler: adminemployee.UpdateEmployeeHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/employees/:id",
					Handler: adminemployee.DeleteEmployeeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/employees/actions/reset-password",
					Handler: adminemployee.ResetPasswordHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/employee"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/roles",
					Handler: adminpermission.ListRolesHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/roles",
					Handler: adminpermission.CreateRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/roles/:roleCode",
					Handler: adminpermission.GetRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/roles/:roleCode",
					Handler: adminpermission.PatchRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/roles/:roleCode/users",
					Handler: adminpermission.GetRoleEmployeesHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/roles/:roleCode/actions/set-permissions",
					Handler: adminpermission.SetRolePermissionsHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/api-list",
					Handler: adminpermission.ListAPIHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/roles/:roleCode/actions/set-employees",
					Handler: adminpermission.SetRoleEmployeesHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/users/:userId/actions/set-roles",
					Handler: adminpermission.SetUserRolesHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/permission"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/access/actions/basic-login",
				Handler: adminauth.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/access/actions/exchange-token",
				Handler: adminauth.ExchangeHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/admin/auth"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/types/page-list",
					Handler: admindictionary.ListDictionaryPageTypesHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/types",
					Handler: admindictionary.ListDictionaryTypesHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/types/:type",
					Handler: admindictionary.GetDictionaryTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/types",
					Handler: admindictionary.CreateDictionaryTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/types/:type",
					Handler: admindictionary.UpdateDictionaryTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/types/:type",
					Handler: admindictionary.DeleteDictionaryTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/items",
					Handler: admindictionary.ListDictionaryItemsHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/items/:type/:key",
					Handler: admindictionary.GetDictionaryItemHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/items",
					Handler: admindictionary.CreateDictionaryItemHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/items/:type/:key",
					Handler: admindictionary.UpdateDictionaryItemHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/items/:type/:key",
					Handler: admindictionary.DeleteDictionaryItemHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/dictionary"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/user-info",
					Handler: adminuserinfo.GetUserInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/menu-roles",
					Handler: adminuserinfo.GetMenuRolesHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/users/actions/modify-password",
					Handler: adminuserinfo.ModifyUserPasswordHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/user-center"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/tag-tree",
					Handler: admintag.ListTagTreeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: admintag.GetTagHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: admintag.CreateTagHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/:id",
					Handler: admintag.UpdateTagHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/:id",
					Handler: admintag.PatchTagHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:id",
					Handler: admintag.DeleteTagHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/tags"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/category-tree",
					Handler: admininfoorganizationcategory.ListCategoryTreeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/categories/:id",
					Handler: admininfoorganizationcategory.GetCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/categories",
					Handler: admininfoorganizationcategory.CreateCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/categories/:id",
					Handler: admininfoorganizationcategory.UpdateCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/categories/:id",
					Handler: admininfoorganizationcategory.PatchCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/categories/:id",
					Handler: admininfoorganizationcategory.DeleteCategoryHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/info-organization"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/leads/:id",
					Handler: admincrmcustomerdomainleader.GetLeadHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/leads/page-list",
					Handler: admincrmcustomerdomainleader.ListLeadsPageHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/leads",
					Handler: admincrmcustomerdomainleader.CreateLeadHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/leads/:id",
					Handler: admincrmcustomerdomainleader.PutLeadHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/leads/:id",
					Handler: admincrmcustomerdomainleader.PatchLeadHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/leads/:id",
					Handler: admincrmcustomerdomainleader.DeleteLeadHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/leads/:id/actions/employees",
					Handler: admincrmcustomerdomainleader.AssignLeadToEmployeeHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/customerdomain"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/customers/:id",
					Handler: admincrmcustomerdomaincustomer.GetCustomerHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/customers/page-list",
					Handler: admincrmcustomerdomaincustomer.ListCustomersPageHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/customers",
					Handler: admincrmcustomerdomaincustomer.CreateCustomerHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/customers/:id",
					Handler: admincrmcustomerdomaincustomer.PutCustomerHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/customers/:id",
					Handler: admincrmcustomerdomaincustomer.PatchCustomerHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/customers/:id",
					Handler: admincrmcustomerdomaincustomer.DeleteCustomerHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/customers/:id/actions/employees",
					Handler: admincrmcustomerdomaincustomer.AssignCustomerToEmployeeHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/customerdomain"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/register-codes/:id",
					Handler: admincrmcustomerdomainregistercode.GetRegisterCodeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/register-codes/page-list",
					Handler: admincrmcustomerdomainregistercode.ListRegisterCodesPageHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/register-codes",
					Handler: admincrmcustomerdomainregistercode.CreateRegisterCodeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/register-codes/generate",
					Handler: admincrmcustomerdomainregistercode.GenerateRegisterCodeHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/register-codes/:id",
					Handler: admincrmcustomerdomainregistercode.PutRegisterCodeHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/register-codes/:id",
					Handler: admincrmcustomerdomainregistercode.PatchRegisterCodeHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/register-codes/:id",
					Handler: admincrmcustomerdomainregistercode.DeleteRegisterCodeHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/customerdomain"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/medias/page-list",
					Handler: admincrmmarketmedia.ListMediasPageHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/medias",
					Handler: admincrmmarketmedia.CreateMediaHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/medias/:id",
					Handler: admincrmmarketmedia.UpdateMediaHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/medias/:id",
					Handler: admincrmmarketmedia.GetMediaHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/medias/:id",
					Handler: admincrmmarketmedia.DeleteMediaHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/market"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/stores/page-list",
					Handler: admincrmmarketstore.ListStoresPageHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/stores/:id",
					Handler: admincrmmarketstore.GetStoreHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/stores",
					Handler: admincrmmarketstore.CreateStoreHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/stores/:id",
					Handler: admincrmmarketstore.PutStoreHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/stores/:id",
					Handler: admincrmmarketstore.DeleteStoreHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/stores/:id/actions/assign-to-store-categroy",
					Handler: admincrmmarketstore.AssignStoreToStoreManagerHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/market"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/mgms/page-list",
					Handler: admincrmmarketmgm.ListMGMRulesPageHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/mgms",
					Handler: admincrmmarketmgm.CreateMGMRuleHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/mgms/:id",
					Handler: admincrmmarketmgm.UpdateMGMRuleHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/mgms/:id",
					Handler: admincrmmarketmgm.GetMGMRuleHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/mgms/:id",
					Handler: admincrmmarketmgm.DeleteMGMRuleHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/market"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/opportunities",
					Handler: admincrmbusinessopportunity.GetOpportunityListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/opportunities",
					Handler: admincrmbusinessopportunity.CreateOpportunityHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/opportunities/:id/assign-employee",
					Handler: admincrmbusinessopportunity.AssignEmployeeToOpportunityHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/opportunities/:id",
					Handler: admincrmbusinessopportunity.UpdateOpportunityHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/opportunities/:id",
					Handler: admincrmbusinessopportunity.DeleteOpportunityHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/business"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/price-books/page-list",
					Handler: admincrmproductpricebook.ListPriceBooksHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/price-books/:id",
					Handler: admincrmproductpricebook.GetPriceBookHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/price-books",
					Handler: admincrmproductpricebook.UpsertPriceBookHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/price-books/:id",
					Handler: admincrmproductpricebook.DeletePriceBookHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/product"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/products/page-list",
					Handler: admincrmproduct.ListProductsPageHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/products/:id",
					Handler: admincrmproduct.GetProductHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/products",
					Handler: admincrmproduct.CreateProductHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/products/:id",
					Handler: admincrmproduct.PutProductHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/products/:id",
					Handler: admincrmproduct.PatchProductHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/products/disable/:id",
					Handler: admincrmproduct.DisableProductHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/products/:id",
					Handler: admincrmproduct.DeleteProductHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/products/:id/actions/assign-to-product-categroy",
					Handler: admincrmproduct.AssignProductToProductCategoryHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/product"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/resources/page-list",
					Handler: adminmediaresource.ListMediaResourcesHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/resources",
					Handler: adminmediaresource.CreateMediaResourceHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/resources/base64",
					Handler: adminmediaresource.CreateMediaResourceByBase64Handler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/resources/:id",
					Handler: adminmediaresource.GetMediaResourceHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/resources/:id",
					Handler: adminmediaresource.DeleteMediaResourceHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/media"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/product-category-tree",
					Handler: admincrmproductcategory.ListProductCategoryTreeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/product-categories/:id",
					Handler: admincrmproductcategory.GetProductCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/product-categories",
					Handler: admincrmproductcategory.CreateProductCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/product-categories/:id",
					Handler: admincrmproductcategory.UpdateProductCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/product-categories/:id",
					Handler: admincrmproductcategory.PatchProductCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/product-categories/:id",
					Handler: admincrmproductcategory.DeleteProductCategoryHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/product"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/product-specifics/page-list",
					Handler: admincrmproductproductspecific.ListProductSpecificPageHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/product-specifics/:id",
					Handler: admincrmproductproductspecific.GetProductSpecificHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/product-specifics",
					Handler: admincrmproductproductspecific.CreateProductSpecificHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/product-specifics/config",
					Handler: admincrmproductproductspecific.ConfigProductSpecificHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/product-specifics/:id",
					Handler: admincrmproductproductspecific.PutProductSpecificHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/product-specifics/:id",
					Handler: admincrmproductproductspecific.PatchProductSpecificHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/product-specifics/:id",
					Handler: admincrmproductproductspecific.DeleteProductSpecificHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/product"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/skus/page-list",
					Handler: admincrmproductsku.ListSKUPageHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/skus/:id",
					Handler: admincrmproductsku.GetSKUHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/skus",
					Handler: admincrmproductsku.CreateSKUHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/skus/config",
					Handler: admincrmproductsku.ConfigSKUHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/skus/:id",
					Handler: admincrmproductsku.PutSKUHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/skus/:id",
					Handler: admincrmproductsku.PatchSKUHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/skus/:id",
					Handler: admincrmproductsku.DeleteSKUHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/product"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/price-book-entries/page-list",
					Handler: admincrmproductpricebookentry.ListPriceBookEntriesHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/price-book-entries/:id",
					Handler: admincrmproductpricebookentry.GetPriceBookEntryHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/price-book-entries/config",
					Handler: admincrmproductpricebookentry.ConfigPriceBookEntryHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/price-book-entries/:id",
					Handler: admincrmproductpricebookentry.UpdatePriceBookEntryHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/price-book-entries/:id",
					Handler: admincrmproductpricebookentry.DeletePriceBookEntryHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/product"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/artisans/page-list",
					Handler: admincrmproductartisan.ListArtisansPageHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/artisans/:id",
					Handler: admincrmproductartisan.GetArtisanHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/artisans",
					Handler: admincrmproductartisan.CreateArtisanHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/artisans/:id",
					Handler: admincrmproductartisan.PutArtisanHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/artisans/:id",
					Handler: admincrmproductartisan.DeleteArtisanHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/artisans/bind/stores",
					Handler: admincrmproductartisan.BindArtisanToStoreHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/product"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/products/page-list",
					Handler: admincrmtradetoken.ListTokenProductsPageHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/products/:id",
					Handler: admincrmtradetoken.GetTokenProductHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/products",
					Handler: admincrmtradetoken.CreateTokenProductHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/products/:id",
					Handler: admincrmtradetoken.PutTokenProductHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/products/:id",
					Handler: admincrmtradetoken.PatchTokenProductHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/products/:id",
					Handler: admincrmtradetoken.DeleteTokenProductHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/trade/token"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/shipping/page-list",
					Handler: admincrmtradeaddressshipping.ListShippingAddressesPageHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/shipping/:id",
					Handler: admincrmtradeaddressshipping.GetShippingAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/shipping",
					Handler: admincrmtradeaddressshipping.CreateShippingAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/shipping/:id",
					Handler: admincrmtradeaddressshipping.PutShippingAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/shipping/:id",
					Handler: admincrmtradeaddressshipping.PatchShippingAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/shipping/:id",
					Handler: admincrmtradeaddressshipping.DeleteShippingAddressHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/trade/address"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/billing/page-list",
					Handler: admincrmtradeaddressbilling.ListBillingAddressesPageHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/billing/:id",
					Handler: admincrmtradeaddressbilling.GetBillingAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/billing",
					Handler: admincrmtradeaddressbilling.CreateBillingAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/billing/:id",
					Handler: admincrmtradeaddressbilling.PutBillingAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/billing/:id",
					Handler: admincrmtradeaddressbilling.PatchBillingAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/billing/:id",
					Handler: admincrmtradeaddressbilling.DeleteBillingAddressHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/trade/address"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/delivery/page-list",
					Handler: admincrmtradeaddressdelivery.ListDeliveryAddressesPageHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/delivery/:id",
					Handler: admincrmtradeaddressdelivery.GetDeliveryAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delivery",
					Handler: admincrmtradeaddressdelivery.CreateDeliveryAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/delivery/:id",
					Handler: admincrmtradeaddressdelivery.PutDeliveryAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/delivery/:id",
					Handler: admincrmtradeaddressdelivery.PatchDeliveryAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/delivery/:id",
					Handler: admincrmtradeaddressdelivery.DeleteDeliveryAddressHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/trade/address"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/warehouses",
					Handler: admincrmtradewarehouse.ListWarehousesHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/warehouses/:id",
					Handler: admincrmtradewarehouse.GetWarehouseHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/warehouses",
					Handler: admincrmtradewarehouse.CreateWarehouseHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/warehouses/:id",
					Handler: admincrmtradewarehouse.UpdateWarehouseHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/warehouses/:id",
					Handler: admincrmtradewarehouse.PatchWarehouseHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/warehouses/:id",
					Handler: admincrmtradewarehouse.DeleteWarehouseHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/trade"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/group-tree",
					Handler: adminscrmcontractway.GetContractWayGroupTreeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/groups",
					Handler: adminscrmcontractway.GetContractWayGroupListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: adminscrmcontractway.GetContractWaysHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: adminscrmcontractway.CreateContractWayHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/:id",
					Handler: adminscrmcontractway.UpdateContractWayHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:id",
					Handler: adminscrmcontractway.DeleteContractWayHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/contract-way"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/employee/page",
					Handler: adminscrmorganization.ListWeWorkEmployeePageHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/sync",
					Handler: adminscrmorganization.SyncWeWorkEmployeeHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/scrm/organization/wechat"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/partment/page",
					Handler: adminscrmorganization.ListWeWorkDepartMentPageHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/scrm/organization/wechat"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/group/list",
					Handler: adminscrmapp.ListWeWorkAppGroupHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/create",
					Handler: adminscrmapp.CreateWeWorkAppGroupHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/message/articles",
					Handler: adminscrmapp.SendWeWorkAppGroupArticleMessageHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/scrm/app/wechat"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/detail",
					Handler: adminscrmapp.DetailWeWorkAppHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/options",
					Handler: adminscrmapp.ListWeWorkAppOptionHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/scrm/app/wechat"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/message/articles",
					Handler: adminscrmapp.SendWeWorkAppArticleMessageHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/scrm/app/wechat"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/sync",
					Handler: adminscrmcustomer.SyncWeWorkCustomerOptionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/page",
					Handler: adminscrmcustomer.ListWeWorkCustomerPageHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/scrm/customer/wechat"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/group/list",
					Handler: adminscrmcustomer.ListWeWorkCustomerGroupLimitHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/message/template",
					Handler: adminscrmcustomer.SendWeWorkCustomerGroupMessageHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/scrm/customer/wechat"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/message/articles",
					Handler: adminscrmbot.BotWeWorkArticlesHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/scrm/bot/wechat"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/image/upload",
					Handler: adminscrmresource.CreateWeWorkImageHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/image/page",
					Handler: adminscrmresource.ListWeWorkImageHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/scrm/resource/wechat"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/group/page",
					Handler: adminscrmqrcode.ListWeWorkQrcodePageHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/create",
					Handler: adminscrmqrcode.CreateWeWorkQrcodeHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/group/update/:qid",
					Handler: adminscrmqrcode.UpdateWeWorkQrcodeHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/group/enable/:qid",
					Handler: adminscrmqrcode.EnableWeWorkQrcodeHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/group/disable/:qid",
					Handler: adminscrmqrcode.DisableWeWorkQrcodeHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/group/:qid",
					Handler: adminscrmqrcode.DeleteWeWorkQrcodeHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/qrcode/:qid",
					Handler: adminscrmqrcode.UpdateActiveQrcodeLinkHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/scrm/qrcode/wechat"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/group/option",
					Handler: adminscrmtag.ListWeWorkTagGroupOptionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/page",
					Handler: adminscrmtag.ListWeWorkTagGroupPageHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/corp/option",
					Handler: adminscrmtag.ListWeWorkTagOptionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/action",
					Handler: adminscrmtag.ActionWeWorkCropTagGroupHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/corp/page",
					Handler: adminscrmtag.ListWeWorkTagPageHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/sync",
					Handler: adminscrmtag.SyncWeWorkGroupTagHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/crop/create",
					Handler: adminscrmtag.CreateWeWorkCropTagHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/crop/update",
					Handler: adminscrmtag.UpdateWeWorkCropTagHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/crop/delete",
					Handler: adminscrmtag.DeleteWeWorkCropTagHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/customer/action",
					Handler: adminscrmtag.ActionWeWorkCustomerTagHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/scrm/tag/wechat"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/menus-tree",
					Handler: adminwechatofficialaccountmenu.QueryMenusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/menus/sync",
					Handler: adminwechatofficialaccountmenu.SyncMenusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/menus",
					Handler: adminwechatofficialaccountmenu.CreateMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/menus",
					Handler: adminwechatofficialaccountmenu.DeleteMenuHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/wechat/official-account"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/medias/page-list",
					Handler: adminwechatofficialaccountmedia.GetMediaListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/media/news/list",
					Handler: adminwechatofficialaccountmedia.GetOAMediaNewsListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/medias/:mediaId",
					Handler: adminwechatofficialaccountmedia.GetOAMediaHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/medias",
					Handler: adminwechatofficialaccountmedia.CreateOAMediaHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/medias/:mediaId",
					Handler: adminwechatofficialaccountmedia.DeleteOAMediaHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/wechat/official-account"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/types/page-list",
				Handler: mpdictionary.ListDictionaryPageTypesHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/types/:type",
				Handler: mpdictionary.GetDictionaryTypeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/items",
				Handler: mpdictionary.ListDictionaryItemsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/items/:type/:key",
				Handler: mpdictionary.GetDictionaryItemHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/mp/dictionary"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: mpcrmcustomerauth.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/authByPhone",
				Handler: mpcrmcustomerauth.AuthByPhoneHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/authByProfile",
				Handler: mpcrmcustomerauth.AuthByProfileHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/mp/customer"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/stores/page-list",
				Handler: mpcrmmarketstore.ListStoresPageHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/mp/market"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/medias/page-list",
				Handler: mpcrmmarketmedia.ListMediasPageHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/mp/market"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.MPCustomerJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/artisans/page-list",
					Handler: mpcrmproductartisan.ListArtisansPageHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/artisans/:id",
					Handler: mpcrmproductartisan.GetArtisanHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/mp/product"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/products/page-list",
				Handler: mpcrmproduct.ListProductsPageHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/products/:id",
				Handler: mpcrmproduct.GetProductHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/mp/product"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/product-category-tree",
				Handler: mpcrmproduct.ListProductCategoryTreeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/product-categories",
				Handler: mpcrmproduct.ListProductCategoriesHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/mp/product"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/product-statistics/page-list",
					Handler: admincrmproductproductstatistics.ListProductStatisticsPageHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/product-statistics/:id",
					Handler: admincrmproductproductstatistics.GetProductStatisticsHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/product-statistics/config",
					Handler: admincrmproductproductstatistics.ConfigProductStatisticsHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/product-statistics/:id",
					Handler: admincrmproductproductstatistics.PutProductStatisticsHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/product-statistics/:id",
					Handler: admincrmproductproductstatistics.PatchProductStatisticsHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/product"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/product-statistics/page-list",
				Handler: mpcrmproductproductstatistics.ListProductStatisticsPageHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/product-statistics/:id",
				Handler: mpcrmproductproductstatistics.GetProductStatisticsHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/mp/product"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.MPCustomerJWTAuth, serverCtx.MPCustomerGet},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/cart/items/page-list",
					Handler: mpcrmtradecart.ListCartItemsPageHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/cart/:cartId",
					Handler: mpcrmtradecart.GetCartHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cart/items",
					Handler: mpcrmtradecart.AddToCartHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/cart/items/:itemId",
					Handler: mpcrmtradecart.UpdateCartItemQuantityHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/cart/items/:itemId",
					Handler: mpcrmtradecart.RemoveCartItemHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/cart/items/clear",
					Handler: mpcrmtradecart.ClearCartItemsHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/mp/trade"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.MPCustomerJWTAuth, serverCtx.MPCustomerGet},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/orders/page-list",
					Handler: mpcrmtradeorder.ListOrdersPageHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/orders/:id",
					Handler: mpcrmtradeorder.GetOrderHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/orders/products",
					Handler: mpcrmtradeorder.CreateOrderByProductsHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/orders/cart-items",
					Handler: mpcrmtradeorder.CreateOrderByCartItemsHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/orders/cancel/:id",
					Handler: mpcrmtradeorder.CancelOrderHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/mp/trade"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/orders/page-list",
					Handler: admincrmtradeorder.ListOrdersPageHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/orders/:id",
					Handler: admincrmtradeorder.GetOrderHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/orders",
					Handler: admincrmtradeorder.CreateOrderHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/orders/:id",
					Handler: admincrmtradeorder.PutOrderHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/orders/:id",
					Handler: admincrmtradeorder.PatchOrderHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/orders/:id",
					Handler: admincrmtradeorder.DeleteOrderHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/orders/export",
					Handler: admincrmtradeorder.ExportOrdersHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/orders/import",
					Handler: admincrmtradeorder.ImportOrdersHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/trade"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.EmployeeJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/payments/page-list",
					Handler: admincrmtradepayment.ListPaymentsPageHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/payments/:id",
					Handler: admincrmtradepayment.GetPaymentHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/payments",
					Handler: admincrmtradepayment.CreatePaymentHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/payments/:id",
					Handler: admincrmtradepayment.PutPaymentHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/payments/:id",
					Handler: admincrmtradepayment.PatchPaymentHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/payments/:id",
					Handler: admincrmtradepayment.DeletePaymentHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/trade"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.MPCustomerJWTAuth, serverCtx.MPCustomerGet},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/shipping/page-list",
					Handler: mpcrmtradeaddressshipping.ListShippingAddressesPageHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/shipping/:id",
					Handler: mpcrmtradeaddressshipping.GetShippingAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/shipping",
					Handler: mpcrmtradeaddressshipping.CreateShippingAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/shipping/:id",
					Handler: mpcrmtradeaddressshipping.PutShippingAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/shipping/:id",
					Handler: mpcrmtradeaddressshipping.PatchShippingAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/shipping/:id",
					Handler: mpcrmtradeaddressshipping.DeleteShippingAddressHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/mp/trade/address"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.MPCustomerJWTAuth, serverCtx.MPCustomerGet},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/delivery/page-list",
					Handler: mpcrmtradeaddressdelivery.ListDeliveryAddressesPageHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/delivery/:id",
					Handler: mpcrmtradeaddressdelivery.GetDeliveryAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delivery",
					Handler: mpcrmtradeaddressdelivery.CreateDeliveryAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/delivery/:id",
					Handler: mpcrmtradeaddressdelivery.PutDeliveryAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/delivery/:id",
					Handler: mpcrmtradeaddressdelivery.PatchDeliveryAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/delivery/:id",
					Handler: mpcrmtradeaddressdelivery.DeleteDeliveryAddressHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/mp/trade/address"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.MPCustomerJWTAuth, serverCtx.MPCustomerGet},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/billing/page-list",
					Handler: mpcrmtradeaddressbilling.ListBillingAddressesPageHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/billing/:id",
					Handler: mpcrmtradeaddressbilling.GetBillingAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/billing",
					Handler: mpcrmtradeaddressbilling.CreateBillingAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/billing/:id",
					Handler: mpcrmtradeaddressbilling.PutBillingAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/billing/:id",
					Handler: mpcrmtradeaddressbilling.PatchBillingAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/billing/:id",
					Handler: mpcrmtradeaddressbilling.DeleteBillingAddressHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/mp/trade/address"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.MPCustomerJWTAuth, serverCtx.MPCustomerGet},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/payments/page-list",
					Handler: mpcrmtradepayment.ListPaymentsPageHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/payments/:id",
					Handler: mpcrmtradepayment.GetPaymentHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/payments",
					Handler: mpcrmtradepayment.CreatePaymentFromOrderHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/payments/:id",
					Handler: mpcrmtradepayment.UpdatePaymentHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/mp/trade"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.WebCustomerJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/types/page-list",
					Handler: mpdictionary.ListDictionaryPageTypesHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/types/:type",
					Handler: mpdictionary.GetDictionaryTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/items",
					Handler: mpdictionary.ListDictionaryItemsHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/items/:type/:key",
					Handler: mpdictionary.GetDictionaryItemHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/web/dictionary"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: webcustomerauth.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/registerByPhone",
				Handler: webcustomerauth.RegisterCustomerByPhoneHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/registerByPhone/invite/:code",
				Handler: webcustomerauth.RegisterCustomerByPhoneInInviteCodeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/registerByPhone/register/:code",
				Handler: webcustomerauth.RegisterCustomerByPhoneInRegisterCodeHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/web/customer"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.WebCustomerJWTAuth, serverCtx.WebCustomerGet},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/updateCustomerProfile/:id",
					Handler: webcustomerauth.UpdateCustomerProfileHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/user-info",
					Handler: webcustomerauth.GetUserInfoHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/web/customer"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/oa/login",
				Handler: webcustomerauthoa.OALoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/oa/authByPhone",
				Handler: webcustomerauthoa.AuthByPhoneHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/oa/authByProfile",
				Handler: webcustomerauthoa.AuthByProfileHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/web/customer"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/qrcode/detail/:qid",
				Handler: webscene.DetailQrcodeHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/web/scene"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.WebCustomerJWTAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/category-tree",
					Handler: webinfoorganizationcategory.ListCategoryTreeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/categories/:id",
					Handler: webinfoorganizationcategory.GetCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/categories",
					Handler: webinfoorganizationcategory.CreateCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/categories/:id",
					Handler: webinfoorganizationcategory.UpdateCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/categories/:id",
					Handler: webinfoorganizationcategory.PatchCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/categories/:id",
					Handler: webinfoorganizationcategory.DeleteCategoryHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/web/info-organization"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/plugin/v1/plugins",
				Handler: plugin.RegisterPluginHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/plugin/v1/plugins",
				Handler: plugin.ListPluginHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/plugin/v1/frontend-routes",
				Handler: plugin.ListPluginFrontendRoutesHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/health",
				Handler: systemhealth.HealthCheckHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/system"),
	)
}
