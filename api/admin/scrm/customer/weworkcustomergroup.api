syntax = "v1"

info(
    title: "企业微信客户管理"
    desc: "企业微信客户管理"
    author: "Eros"
    email: "smoke.mvp@gmail.com"
    version: "v1"
)

@server(
    group: admin/scrm/customer
    prefix: /api/v1/admin/scrm/customer/wechat
    middleware: UserJWTAuth
)

service PowerX {
    @doc "客户群列表/limit"
    @handler ListWeWorkCustomerGroupLimit
    post /group/list (WeWorkCustomerGroupRequest) returns (WeWorkListCustomerGroupReply)

    @doc "客户群发信息"
    @handler SendWeWorkCustomerGroupMessage
    post /group/message/template (WeWorkAddMsgTemplateRequest) returns (WeWorkAddMsgTemplateResponse)
}




type (
    WeWorkCustomerGroupRequest {
        StatusFilter int `json:"statusFilter,optional"` // https://developer.work.weixin.qq.com/document/path/92120
        OwnerFilter OwnerFilter `json:"ownerFilter,optional"`
        Cursor string `json:"cursor,optional"`
        Limit int `json:"limit,optional"`
    }
    OwnerFilter struct {
        UseridList []string `json:"useridList,optional"`
    }
)


type (
    WeWorkListCustomerGroupReply {
        List []WechatCustomerGroup `json:"list"` //https://developer.work.weixin.qq.com/document/path/92122
    }
    WechatCustomerGroup struct {
        ChatId string `json:"chatId"`
        Name string `json:"name"`
        Owner string `json:"owner"`
        CreateTime int `json:"createTime"`
        Notice string `json:"notice"`
        MemberList []*WechatCustomerGroupMemberList `json:"memberList"`
        AdminList []*WechatCustomerGroupAdminList `json:"adminList"`
    }
    WechatCustomerGroupAdminList struct {
        UserId string `json:"userId"`
    }

    WechatCustomerGroupMemberList struct {
        UserId string `json:"userId"`
        Type int `json:"type"`
        JoinTime int `json:"joinTime"`
        JoinScene int `json:"joinScene"`
        Invitor WechatCustomerGroupMemberListInvitor `json:"invitor"`
        GroupNickname string `json:"groupNickname"`
        Name string `json:"name"`
        UnionId string `json:"unionId,omitempty"`
    }
    WechatCustomerGroupMemberListInvitor struct {
        UserId string `json:"userId"`
    }
)


type (
    WeWorkAddMsgTemplateRequest struct {

        ChatType string `json:"chatType,optional,options=single|group"`               // 群发任务的类型，默认为single，表示发送给客户，group表示发送给客户群
        ExternalUserId []string `json:"externalUserId,optional"`                      // chat_type为single时有效，不可与sender同时为空
        Sender string `json:"sender,optional"`                                        // 发送企业群发消息的成员userid，当类型为发送给客户群时必填
        Text *WeWorkTextOfMessage `json:"text"`
        Attachments []Content `json:"attachments,optional"`
        SendTime int64 `json:"sendTime,optional"` // 定时发送，不填默认立刻发送// 附件， 当前仅支持图片
    }

    WeWorkTextOfMessage struct {
        Content string `json:"content"` // "内容"
    }

    Content struct {
        Link Link `json:"link,optional"`
        //Image Image `json:"image,optional"`
    }

    Link struct {
        MsgType string `json:"msgType,optional"` // 默认:link
        Title string `json:"title"`              //  "消息标题",
        PicURL string `json:"picUrl"`            //  "https://example.pic.com/path",
        Desc string `json:"desc"`                //  "消息描述",
        URL string `json:"url"`                  //  "https://example.link.com/path"
    }

    Image struct {
        MediaId string `json:"mediaId,optional"` // 不填
        PicUrl string `json:"picUrl,optional"`   // 图片地址
    }


    WeWorkAddMsgTemplateResponse struct {
        FailList []string `json:"failList"`
        MsgId string `json:"msgId"`
    }
)

