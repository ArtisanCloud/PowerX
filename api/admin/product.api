syntax = "v1"

info(
    title: "产品服务"
    desc: "产品服务"
    author: "MichaelHu"
    email: "matrix-x@artisan-cloud.com"
    version: "v1"
)


@server(
    group: admin/product
    prefix: /api/v1/admin/product
    middleware: EmployeeJWTAuth
)

service PowerX {
    @doc "查询产品列表"
    @handler ListProducts
    get /products (ListProductsPageRequest) returns (ListProductsPageReply)

    @doc "查询产品详情"
    @handler GetProduct
    get /products/:id (GetProductRequest) returns (GetProductReply)


    @doc "创建产品"
    @handler CreateProduct
    post /products (CreateProductRequest) returns (CreateProductReply)


    @doc "全量产品"
    @handler PutProduct
    put /products/:id (PutProductRequest) returns (PutProductReply)

    @doc "增量产品"
    @handler PatchProduct
    patch /products/:id (PatchProductRequest) returns (PatchProductReply)


    @doc "删除产品"
    @handler DeleteProduct
    delete /products/:id (DeleteProductRequest) returns (DeleteProductReply)

    @doc "分配产品品类给产品品类分类"
    @handler AssignProductToProductCategory
    post /products/:id/actions/assign-to-product-categroy (AssignProductToProductCategoryRequest) returns (AssignProductToProductCategoryReply)
}

type (
    ProductSpecific {
        Inventory int16 `json:"inventory,optional"`
        Weight float32 `json:"weight,optional"`
        Volume float32 `json:"volume,optional"`
        Encode string `json:"encode,optional"`
        BarCode string `json:"barCode,optional"`
        Extra string `json:"extra,optional"`
    }

    PivotDataDictionaryToObject {
        DataDictionaryType string `json:"dataDictionaryType,optional"`
        DataDictionaryKey string `json:"dataDictionaryKey,optional"`
    }

    Product {
        Id int64 `json:"id,optional"`

        Name string `json:"name"`
        Type int `json:"type"`
        Plan int `json:"plan"`
        AccountingCategory string `json:"accountingCategory"`
        CanSellOnline bool `json:"canSellOnline,optional"`
        CanUseForDeduct bool `json:"canUseForDeduct,optional"`
        Description string `json:"description,optional"`
        CoverURL string `json:"coverURL,optional"`
        PurchasedQuantity int `json:"purchasedQuantity,optional"`
        ValidityPeriodDays uint8 `json:"validityPeriodDays,optional"`
        SaleStartDate string `json:"saleStartDate,optional"`
        SaleEndDate string `json:"saleEndDate,optional"`
        ApprovalStatus int `json:"approvalStatus,optional"`
        IsActivated bool `json:"isActivated,optional"`
        CreatedAt string `json:"createdAt,optional"`
        ProductSpecific
        PivotSalesChannels []*PivotDataDictionaryToObject `json:"pivotSalesChannels,optional"`
        PivotPromoteChannels []*PivotDataDictionaryToObject `json:"pivotPromoteChannels,optional"`
        SalesChannelsItemIds []int64 `json:"salesChannelsItemIds,optional"`
        PromoteChannelsItemIds []int64 `json:"promoteChannelsItemIds,optional"`
    }
)
type (
    ListProductsPageRequest struct {
        ProductType string `form:"productType,optional"`
        Keys []string `form:"keys,optional"`
        OrderBy string `form:"orderBy,optional"`
        PageIndex int `form:"pageIndex,optional"`
        PageSize int `form:"pageSize,optional"`
    }


    ListProductsPageReply struct {
        List []Product `json:"list"`
        PageIndex int `json:"pageIndex"`
        PageSize int `json:"pageSize"`
        Total int64 `json:"total"`
    }
)

type (
    CreateProductRequest struct {
        Product
    }

    CreateProductReply struct {
        ProductKey int64 `json:"id"`
    }
)

type (
    GetProductRequest struct {
        ProductId int64 `path:"id"`
    }

    GetProductReply struct {
        *Product
    }
)


type (
    PutProductRequest struct {
        ProductId int64 `path:"id"`
        Product
    }

    PutProductReply struct {
        *Product
    }
)

type (
    PatchProductRequest struct {
        ProductId int64 `path:"id"`
        Product
    }

    PatchProductReply struct {
        *Product
    }
)


type (
    DeleteProductRequest struct {
        ProductId int64 `path:"id"`
    }

    DeleteProductReply struct {
        ProductId int64 `json:"id"`
    }
)


type (
    AssignProductToProductCategoryRequest {
        Id int64 `json:"id"`
        ProductCategoryId int64 `json:"productCategoryId"`
    }

    AssignProductToProductCategoryReply {
        Product
    }
)
