syntax = "v1"

info(
    title: "线索管理"
    desc: "线索管理"
    author: "MichaelHu"
    email: "matrix-x@artisan-cloud.com"
    version: "v1"
)

@server(
    group: admin/crm/customerdomain/leader
    prefix: /api/v1/admin/customerdomain
    middleware: UserJWTAuth
)

service PowerX {
    @doc "查询线索"
    @handler GetLead
    get /leads/:id (GetLeadRequest) returns (GetLeadReply)

    @doc "获取线索分页列表"
    @handler ListLeadsPage
    get /leads/page-list (ListLeadsPageRequest) returns (ListLeadsPageReply)

    @doc "创建线索"
    @handler CreateLead
    post /leads (CreateLeadRequest) returns (CreateLeadReply)

    @doc "全量线索"
    @handler PutLead
    put /leads/:id (PutLeadRequest) returns (PutLeadReply)

    @doc "增量线索"
    @handler PatchLead
    patch /leads/:id (PatchLeadRequest) returns (PatchLeadReply)

    @doc "删除线索"
    @handler DeleteLead
    delete /leads/:id (DeleteLeadRequest) returns (DeleteLeadReply)

    @doc "为线索分配员工"
    @handler AssignLeadToUser
    post /leads/:id/actions/users (AssignLeadToUserRequest) returns (AssignLeadToUserReply)
}

type (
    LeadExternalId {
        OpenIdInMiniProgram string `json:"openIdInMiniProgram,optional"`
        OpenIdInWeChatOfficialAccount string `json:"openIdInWeChatOfficialAccount,optional"`
        OpenIdInWeCom string `json:"openIdInWeCom,optional"`
    }
)

type (
    LeadInviter {
        Id int64 `json:"id"`
        Name string `json:"name,optional"`
        Mobile string `json:"mobile,optional"`
        Email string `json:"email,optional"`
    }

    Lead {
        Id int64 `json:"id,optional"`
        Name string `json:"name"`
        Mobile string `json:"mobile"`
        Email string `json:"email,optional"`
        Inviter *LeadInviter `json:"inviter,optional"`
        InviterId int64 `json:"inviter,optional"`
        Source int `json:"source,optional"`
        Type int `json:"type,optional"`
        IsActivated bool `json:"isActivated,optional,omitempty"`
        CreatedAt string `json:"createdAt,optional"`
        *LeadExternalId
    }
)

type (
    GetLeadRequest {
        Id int64 `path:"id"`
    }

    GetLeadReply {
        Lead *Lead `json:"lead"`
    }
)

type (
    ListLeadsPageRequest {
        LikeName string `form:"likeName,optional"`
        LikeMobile string `form:"likeMobile,optional"`
        Sources []int `form:"sources,optional"`
        Statuses []int `form:"statuses,optional"`
        OrderBy string `form:"orderBy,optional"`
        PageIndex int `form:"pageIndex,optional"`
        PageSize int `form:"pageSize,optional"`
    }

    ListLeadsPageReply {
        List []Lead `json:"list,optional"`
        PageIndex int `json:"pageIndex,optional"`
        PageSize int `json:"pageSize,optional"`
        Total int64 `json:"total,optional"`
    }
)

type (
    CreateLeadRequest {
        Lead
    }

    CreateLeadReply {
        LeadId int64 `json:"id"`
    }
)

type PutLeadRequest {
    LeadId int64 `path:"id"`
    Lead
}

type PutLeadReply {
    *Lead
}


type (
    PatchLeadRequest {
        LeadId int64 `path:"id"`
        Name string `json:"name,optional"`
        Email string `json:"email,optional"`
        InviterId int64 `json:"inviterId,optional"`
        Source int `json:"source,optional"`
        Type int `json:"type,optional"`
        IsActivated bool `json:"isActivated,optional,omitempty"`
    }

    PatchLeadReply {
        *Lead
    }
)

type (
    DeleteLeadRequest {
        Id int64 `path:"id"`
    }

    DeleteLeadReply {
        LeadId int64 `json:"id"`
    }
)

type (
    AssignLeadToUserRequest {
        Id string `path:"id"`
        UserId int64 `json:"userId"`
    }

    AssignLeadToUserReply {
        LeadId int64 `json:"leadId"`
    }
)