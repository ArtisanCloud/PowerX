syntax = "v1"

info(
    title: "门店"
    desc: "门店"
    author: "MichaelHu"
    email: "matrix-x@artisan-cloud.com"
    version: "v1"
)


@server(
    group: admin/crm/market/store
    prefix: /api/v1/admin/market
    middleware: UserJWTAuth
)

service PowerX {
    @doc "查询门店列表"
    @handler ListStoresPage
    get /stores/page-list (ListStoresPageRequest) returns (ListStoresPageReply)

    @doc "查询门店详情"
    @handler GetStore
    get /stores/:id (GetStoreRequest) returns (GetStoreReply)


    @doc "创建门店"
    @handler CreateStore
    post /stores (CreateStoreRequest) returns (CreateStoreReply)


    @doc "全量门店"
    @handler PutStore
    put /stores/:id (PutStoreRequest) returns (PutStoreReply)


    @doc "删除门店"
    @handler DeleteStore
    delete /stores/:id (DeleteStoreRequest) returns (DeleteStoreReply)

    @doc "分配门店经理给门店"
    @handler AssignStoreToStoreManager
    post /stores/:id/actions/assign-to-store-categroy (AssignStoreManagerRequest) returns (AssignStoreManagerReply)
}

type (
    StoreArtisanSpecific {
        ArtisanId int64 `json:"artisanId,optional"`
    }

    StoreArtisan {
        UserId int64 `json:"userId,optional"`
        Name string `json:"name,optional"`
        Level int8 `json:"level,optional"`
        Gender bool `json:"gender,optional"`
        birthday string `json:"birthday,optional"`
        PhoneNumber string `json:"phoneNumber,optional"`
        CoverURL string `json:"coverURL,optional"`
        WorkNo string `json:"workNo,optional"`
        Email string `json:"email,optional"`
        Experience string `json:"experience,optional"`
        Specialty string `json:"specialty,optional"`
        Certificate string `json:"certificate,optional"`
        Address string `json:"address,optional"`
        ArtisanSpecific StoreArtisanSpecific `json:"artisanSpecific,optional"`
    }

    Store {
        Id int64 `json:"id,optional"`
        Name string `json:"name"`
        StoreUserId int64 `json:"storeUserId,optional"`
        ContactNumber string `json:"contactNumber"`
        Email string `json:"email,optional"`
        Address string `json:"address"`
        Description string `json:"description,optional"`
        Longitude float32 `json:"longitude,optional"`
        Latitude float32 `json:"latitude,optional"`
        StartWork string `json:"startWork,optional"`
        EndWork string `json:"endWork,optional"`
        Artisans []*StoreArtisan `json:"artisans,optional"`
        CreatedAt string `json:"createdAt,optional"`

        CoverImageId int64 `json:"coverImageId,optional"`
        CoverImage *MediaResource `json:"coverImage,optional"`
        DetailImageIds []int64 `json:"detailImageIds,optional"`
        DetailImages []*MediaResource `json:"detailImages,optional"`
    }
)
type (
    ListStoresPageRequest {
        Ids []int64 `form:"ids,optional"`
        LikeName string `form:"likeName,optional"`
        OrderBy string `form:"orderBy,optional"`
        PageIndex int `form:"pageIndex,optional"`
        PageSize int `form:"pageSize,optional"`
    }


    ListStoresPageReply {
        List []*Store `json:"list"`
        PageIndex int `json:"pageIndex"`
        PageSize int `json:"pageSize"`
        Total int64 `json:"total"`
    }
)

type (
    CreateStoreRequest {
        Store
    }

    CreateStoreReply {
        StoreId int64 `json:"id"`
    }
)

type (
    GetStoreRequest {
        StoreId int64 `path:"id"`
    }

    GetStoreReply {
        *Store
    }
)


type (
    PutStoreRequest {
        StoreId int64 `path:"id"`
        Store
    }

    PutStoreReply {
        *Store
    }
)


type (
    DeleteStoreRequest {
        StoreId int64 `path:"id"`
    }

    DeleteStoreReply {
        StoreId int64 `json:"id"`
    }
)


type (
    AssignStoreManagerRequest {
        Id int64 `path:"id"`
        UserId int64 `json:"userId"`
    }

    AssignStoreManagerReply {
        Store
    }
)
