syntax = "v1"

info(
    title: "权限管理"
    desc: "权限管理"
    author: "Northseadl"
    email: "northseadl@outlook.com"
    version: "v1"
)

@server(
    group: admin/permission
    prefix: /api/v1/admin/permission
    middleware: EmployeeJWTAuth
)

service PowerX {
    @doc "查询角色列表"
    @handler ListRoles
    get /roles returns (ListRolesReply)

    @doc "创建角色"
    @handler CreateRole
    post /roles (CreateRoleRequest) returns (CreateRoleReply)

    @doc "获取角色详情"
    @handler GetRole
    get /roles/:roleCode (GetRoleRequest) returns (GetRoleReply)

    @doc "更新角色详情"
    @handler PatchRole
    patch /roles/:roleCode (PatchRoleReqeust) returns (PatchRoleReply)

    @doc "获取角色的用户列表"
    @handler GetRoleEmployees
    get /roles/:roleCode/users (GetRoleEmployeesReqeust) returns (GetRoleEmployeesReply)

    @doc "为角色授予API权限"
    @handler SetRolePermissions
    post /roles/:roleCode/actions/set-permissions (SetRolePermissionsRequest) returns (SetRolePermissionsReply)

    @doc "查询API列表"
    @handler ListAPI
    get /api-list (ListAPIRequest) returns (ListAPIReply)

    @doc "为用户授予角色"
    @handler SetUserRoles
    post /users/:userId/actions/set-roles (SetUserRolesRequest) returns (SetUserRolesReply)
}

type AdminAPI {
    Id int64 `json:"id"`
    API string `json:"api"`
    Method string `json:"method"`
    Name string `json:"name"`
    GroupId int64 `json:"groupId"`
    GroupName string `json:"groupName"`
    Desc string `json:"desc"`
}

type AdminRole {
    RoleCode string `json:"roleCode"`
    Name string `json:"name"`
    Desc string `json:"desc"`
    IsReserved bool `json:"isReserved"`
    APIList []AdminAPI `json:"apiList"`
    MenuNames []string `json:"menuNames"`
}

type (
    ListRolesReply {
        List []AdminRole `json:"list"`
    }
)

type (
    CreateRoleRequest {
        RoleCode string `json:"roleCode"`
        Name string `json:"name"`
        Desc string `json:"desc"`
        APIIds []int64 `json:"apiIds"`
        MenuNames []string `json:"menuNames"`
    }

    CreateRoleReply {
        RoleCode string `json:"roleCode"`
    }
)

type (
    GetRoleRequest {
        RoleCode string `path:"roleCode"`
    }

    GetRoleReply {
        *AdminRole
    }
)

type (
    PatchRoleReqeust {
        RoleCode string `path:"roleCode"`
        Name string `json:"name"`
        Desc string `json:"desc"`
        APIIds []int64 `json:"apiIds"`
        MenuNames []string `json:"menuNames"`
    }

    PatchRoleReply {
        *AdminRole
    }
)

type (
    SetRolePermissionsRequest {
        RoleCode string `path:"roleCode"`
        APIIds []int64 `json:"apiIds"`
    }

    SetRolePermissionsReply {
        Status string `json:"status"`
    }
)

type (
    ListAPIRequest {
        GroupId int64 `form:"groupId,optional"`
    }

    ListAPIReply {
        List []AdminAPI `json:"list"`
    }
)

type (
    GetRoleEmployeesReqeust {
        RoleCode string `path:"roleCode"`
        PageIndex int `json:"pageIndex"`
        PageSize int `json:"pageSize"`
    }

    RoleEmployeeDepartment {
        Id int64 `json:"id"`
        Name string `json:"name"`
    }

    RoleEmployee {
        Id int64 `json:"id"`
        Name string `json:"name"`
        Nickname string `json:"nickname"`
        Account string `json:"account"`
        PhoneNumber string `json:"phoneNumber"`
        Department *RoleEmployeeDepartment `json:"department"`
        Email string `json:"email"`
    }

    GetRoleEmployeesReply {
        List []RoleEmployee `json:"list"`
        PageIndex int `json:"pageIndex"`
        PageSize int `json:"pageSize"`
        Total int64 `json:"total"`
    }
)

type (
    SetUserRolesRequest {
        UserId int64 `path:"userId"`
        RoleCodes []string `json:"roleCodes"`
    }

    SetUserRolesReply {
        Status string `json:"status"`
    }
)
